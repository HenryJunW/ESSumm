Well eh you know that I work {disfmarker} I begin to work with a new feature to detect voice - unvoice .
What I trying two MLP to {disfmarker} to the {disfmarker} with this new feature and the fifteen feature uh from the eh bus base system
yeah the Aurora system with the new filter , VAD or something like that .
And I 'm trying two MLP , one one that only have t three output ,
voice , unvoice , and silence ,
and other one that have fifty - six output .
The probabilities of the allophone .
And I tried to do some experiment of recognition with that
and only have result with {disfmarker} with the MLP with the three output .
And I put together the fifteen features and the three MLP output .
And , well , the result are li a little bit better , but more or less similar .
What features does it see ?
The inputs are the fifteen {disfmarker} the fifteen uh bases feature .
And the other three features are R , the variance of the difference between the two spectrum ,
the variance of the auto - correlation function , except the {disfmarker} the first point , because half the height value is R - zero
the {disfmarker} with the new code .
the first coefficient of the auto - correlation function .
That is like the energy with these three feature ,
but then you have something like spectral slope , which is you get like R - one ov over R - zero or something like that .
but if you just say " what is {disfmarker} "
I mean , to first order , um
yeah one of the differences between voiced , unvoiced and silence is energy .
Another one is {disfmarker} but the other one is the spectral shape .
and so R - one over R - zero is what you typically use for that .
See , because it {disfmarker} because this is {disfmarker} this is just like a single number to tell you um " does the spectrum look like that or does it look like that " .
So if it 's {disfmarker} if it 's um {disfmarker} if it 's low energy uh but the {disfmarker} but the spectrum looks like that or like that , it 's probably silence .
Uh but if it 's low energy and the spectrum looks like that , it 's probably unvoiced .
So if you just {disfmarker} if you just had to pick two features to determine voiced - unvoiced , you 'd pick something about the spectrum like uh R - one over R - zero , um and R - zero
Right , but it seemed to me that what you were what you were getting at before was that there is something about the difference between the original signal or the original FFT and with the filter which is what {disfmarker}
and the variance was one take uh on it .
Then in that case , if you have two nets ,
Alright , and this one has three outputs , and this one has f
fifty - six , or something ,
if you were to sum up the probabilities for the voiced and for the unvoiced and for the silence here , we 've found in the past you 'll do better at voiced - unvoiced - silence than you do with this one .
So just having the three output thing doesn't {disfmarker} doesn't really buy you anything .
And what I was saying is that the only thing I think that it buys you is um based on whether you feed it something different .
And so the kind of thing that {disfmarker} that she was talking about before , was looking at something uh ab um {disfmarker} something uh about the difference between the {disfmarker} the uh um log FFT uh log power uh and the log magnitude uh F F - spectrum uh and the um uh filter bank .
So the particular measure that she chose was the variance of this m of this difference ,
but that might not be the right number .
uh What about it you skip all the {disfmarker} all the really clever things , and just fed the log magnitude spectrum into this ?
And you just took this thing in here because it 's a neural net and neural nets are wonderful
and figure out what they can {disfmarker} what they most need from things , and I mean that 's what they 're good at .
How long does it take , Carmen , to train up one of these nets ?
Mmm , one day or less .
What are {disfmarker} what are your f uh frame error rates for {disfmarker} for this ?
Fif - fifty - six percent accurate for v voice - unvoice
I don't remember for voice - unvoice ,
Should be in nineties somewhere .
This is for the other one .
That I look in the {disfmarker} with the other {disfmarker} nnn the other MLP that we have are more or less the same number .
I think that {disfmarker} I {disfmarker} I {disfmarker} I think that for the other one , for the three output , is sixty sixty - two , sixty three more or less .
That 's pretty bad .
Yeah , because it 's noise also .
If you 're getting fifty - six here , try adding together the probabilities of all of the voiced phones here and all of the unvoiced phones
Given this {disfmarker} this uh regular old net that 's just for choosing for other purposes , uh add up the probabilities of the different subclasses and see {disfmarker} see how well you do .
We have noisy TIMIT with the noise of the {disfmarker} the TI - digits .
and also mmm I {disfmarker} H Hynek last week say that if I have time I can to begin to {disfmarker} to study
well seriously the France Telecom proposal
But the first thing that I don't understand is that they are using R - the uh log energy that this quite {disfmarker}
I don't know why they have some constant in the expression of the lower energy .
Oh , at the front it says uh " log energy is equal to the rounded version of sixteen over the log of two "
Well , this is natural log ,
and maybe it has something to do with the fact that this is {disfmarker}
Is that some kind of base conversion ,
But I don't know what is the meaning of take exactly this value .
Well , it says , since you 're taking a natural log , it says that when {disfmarker} when you get down to essentially zero energy , this is gonna be the natural log of one , which is zero .
So y you 're restricted to being positive .
And this sort of smooths it for very small energies .
I think , given at the level you 're doing things in floating point on the computer , I don't think it matters , would be my guess ,
So . I {disfmarker} I guess some of the progress , I {disfmarker} I 've been getting a {disfmarker} getting my committee members for the quals .
And um so far I have Morgan and Hynek , {vocalsound} Mike Jordan ,
and I asked John Ohala and he agreed .
So I 'm {disfmarker} I {disfmarker} I just need to ask um Malek .
Then uh I talked a little bit about {vocalsound} um continuing with these dynamic ev um acoustic events ,
and um {vocalsound} {vocalsound} we 're {disfmarker} we 're {disfmarker} we 're {vocalsound} thinking about a way to test the completeness of a {disfmarker} a set of um dynamic uh events .
Uh , completeness in the {disfmarker} in the sense that {vocalsound} um if we {disfmarker} if we pick these X number of acoustic events , {vocalsound} do they provide sufficient coverage {vocalsound} for the phones that we 're trying to recognize {vocalsound} or {disfmarker} or the f the words that we 're gonna try to recognize later on .
And so Morgan and I were uh discussing {vocalsound} um s uh s a form of a cheating experiment {vocalsound} where we get {disfmarker} {vocalsound} um we have uh {vocalsound} um a chosen set of features , or acoustic events ,
and we train up a hybrid {vocalsound} um system to do phone recognition on TIMIT .
So i i the idea is if we get good phone recognition results , {vocalsound} using um these set of acoustic events , {vocalsound} then {vocalsound} um that {disfmarker} that says that these acoustic events are g sufficient to cover {vocalsound} a set of phones ,
Um so i it would be a {disfmarker} {vocalsound} a measure of " are we on the right track with {disfmarker} with the {disfmarker} the choices of our acoustic events " .
The {disfmarker} the other thing I was suggesting , though , is that given that you 're talking about binary features , uh , maybe the first thing to do is just to count
and uh count co - occurrences and get probabilities for a discrete HMM
because it 's just {disfmarker} Say , if you had ten {disfmarker} ten events , uh that you were counting , uh each frame would only have a thousand possible values for these ten bits ,
and uh so you could make a table that would {disfmarker} say , if you had thirty - nine phone categories , that would be a thousand by thirty - nine ,
and just count the co - occurrences and divide them by the {disfmarker} the uh {disfmarker} uh uh occ uh count the co - occurrences between the event and the phone and divide them by the number of occurrences of the phone ,
and that would give you the likelihood of the {disfmarker} of the event given the phone .
And um then just use that in a very simple HMM
and uh you could uh do phone recognition then and uh wouldn't have any of the issues of the uh training of the net or {disfmarker}
you know , if {disfmarker} uh uh the example I was giving was that if {disfmarker} if you had um onset of voicing and {disfmarker} and end of voicing as being two kinds of events , then if you had those a all marked correctly , and you counted co - occurrences , you should get it completely right .
um {disfmarker} But you 'd get all the other distinctions , you know , randomly wrong .
If you just do this by counting , then you should be able to find out in a pretty straightforward way whether you have a sufficient uh set of events to {disfmarker} to do the kind of level of {disfmarker} {vocalsound} of uh classification of phones that you 'd like .
And then the other thing that we were discussing was {disfmarker} was um {vocalsound} OK , how do you get the {disfmarker} your training data .
So , it seems to me that the only reasonable starting point is uh to automatically translate the uh current TIMIT markings into the markings you want .
and hopefully there should be some point at which {vocalsound} having more information doesn't tell you really all that much more about what the phones are .
You know . The idea is with a {disfmarker} with a very simple statistical structure , could you {disfmarker} could you uh at least verify that you 've chosen features that {vocalsound} are sufficient .
So for my class project I 'm {vocalsound} um {vocalsound} {vocalsound} I 'm tinkering with uh support vector machines ?
And so I 'm gonna apply that to {vocalsound} um compare it with the results by um King and Taylor who did {vocalsound} um these
using recurrent neural nets , they recognized {vocalsound} um {vocalsound} a set of phonological features
and made a mapping from the MFCC 's to these phonological features ,
so I 'm gonna {vocalsound} do a similar thing with {disfmarker} {vocalsound} with support vector machines
Um . So , support vector machines are {disfmarker} are good with dealing with a less amount of data
So , {vocalsound} the {disfmarker} the simple idea behind a support vector machine is {vocalsound} um , {vocalsound} you have {disfmarker} you have this feature space ,
and then it finds the optimal separating plane , um between these two different um classes ,
what it {disfmarker} i at the end of the day , what it actually does is {vocalsound} it picks {vocalsound} those examples of the features that are closest to the separating boundary ,
and remembers those
and {disfmarker} {vocalsound} and uses them to recreate the boundary for the test set .
So , given these {vocalsound} um these features , or {disfmarker} or these {disfmarker} these examples , {pause} um , {pause} critical examples , {vocalsound} which they call support f support vectors , {vocalsound} then um {vocalsound} given a new example , {vocalsound} if the new example falls {vocalsound} um away from the boundary in one direction then it 's classified as being a part of this particular class
So rather than doing nearest neighbor where you compare to every single one , you just pick a few critical ones ,
I it can be a {disfmarker} a reduced um {vocalsound} parameterization of {disfmarker} of the {disfmarker} the model by just keeping {vocalsound} certain selected examples .
Actually you don't get a {disfmarker} you don't get a nice number between zero and one .
You get {disfmarker} you get either a zero or a one .
But you have the distances to work with .
Yeah , they {disfmarker} {vocalsound} they had a {disfmarker} had a way to translate the distances into {disfmarker} into probabilities with the {disfmarker} with the simple {vocalsound} um {vocalsound} uh sigmoidal function .
I 'm just doing {vocalsound} detection of phonological features .
f so for every phone there is {disfmarker} there is a um {disfmarker} a vector of ones and zeros {vocalsound} f uh corresponding to whether it exhibits a particular phonological feature or not .
basically it 's to learn a mapping {vocalsound} from {disfmarker} {vocalsound} from the MFCC 's to {vocalsound} uh phonological features .
but I was gonna ask about the {disfmarker} {vocalsound} the um {vocalsound} changes to the data in comparing PLP and mel cepstrum for the SRI system .
and {vocalsound} you told me that there was a difference in how the normalization was done .
And I was asking if you were going to do {disfmarker} {vocalsound} redo it uh for PLP with the normalization done as it had been done for the mel cepstrum .
well it seems like there 's a bug ,
because the difference in performance is {disfmarker} it 's not gigantic
but it 's big enough that it {disfmarker} it seems wrong .
So I was going through and just double - checking that kind of think first , to see if there was just some kind of obvious bug in the way that I was computing the features .
So one thing that I did notice , yesterday I was studying the um {disfmarker} the uh RASTA code
and it looks like we don't have any way to um control the frequency range that we use in our analysis .
We don't have any set of parameters where we can say you know , " only process from you know a hundred and ten hertz to thirty - seven - fifty " .
Yeah , so the idea is that the very lowest frequencies and {disfmarker} and typically the veriest {comment} highest frequencies are kind of junk .
you just {disfmarker} for continuity you just approximate them by {disfmarker} {vocalsound} by the second to highest and second to lowest .
I was wondering if there 's maybe um {vocalsound} certain settings of the parameters when you compute PLP which would basically cause it to output mel cepstrum .
what you can do is um you can definitely change the {disfmarker} the filter bank from being uh a uh trapezoidal integration to a {disfmarker} a {disfmarker} a triangular one ,
I mean {vocalsound} the fundamental d d difference that we 've seen any kind of difference from before , which is actually an advantage for the P L P i uh , I think , is that the {disfmarker} the smoothing at the end is auto - regressive instead of being cepstral {disfmarker} uh , {comment} from cepstral truncation .
One of the things that I did notice was that the um log likelihoods coming out of the log recognizer from the PLP data were much lower , much smaller ,
than for the mel cepstral stuff , and that the average amount of pruning that was happening was therefore a little bit higher for the PLP features .
So , since he used the same exact pruning thresholds for both , I was wondering if it could be that we 're getting more pruning .
But I mean you could {disfmarker} uh if {disfmarker} if {disfmarker} if that looks promising you could , you know , r uh run {vocalsound} the overall test set with a {disfmarker} with a few different uh pruning thresholds for both ,
And the uh the {disfmarker} the run time of the recognizer on the PLP features is longer
which sort of implies that the networks are bushier ,
you know , there 's more things it 's considering
which goes along with the fact that the matches aren't as good .
well I {vocalsound} tried this mean subtraction method .
Due to Avendano , {vocalsound} I 'm taking s um {vocalsound} six seconds of speech ,
um {vocalsound} I 'm using two second {vocalsound} FFT analysis frames , {vocalsound} stepped by a half second
I use that to normalize the s the current center frame {vocalsound} by mean subtraction .
And I then {disfmarker} then I move to the next frame and I {disfmarker} {vocalsound} I do it again .
Well , actually I calculate all the means first
and then I do the subtraction .
um {vocalsound} where I just used the simulated impulse response um {vocalsound} the error rate went from something like eighty it was from something like eighteen percent {vocalsound} to um four percent .
And on meeting rec recorder far mike digits , mike {disfmarker} on channel F , it went from um {vocalsound} {vocalsound} forty - one percent error to eight percent error .
He did one PZM channel and one PDA channel .
I think it was about five percent error for the PZM channel .
So why were you getting forty - one here ?
I {disfmarker} I 'm g I 'm guessing it was the {disfmarker} the training data .
Uh , clean TI - digits is , like , pretty pristine {vocalsound} training data ,
So probably it should be something we should try then is to {disfmarker} is to see if {disfmarker} is {vocalsound} at some point just to take {disfmarker} i to transform the data
and then {disfmarker} {vocalsound} and then uh use th use it for the SRI system .
O one thing I 'm wondering about is what this mean subtraction method {vocalsound} um will do if it 's faced with additive noise .
Cuz I {disfmarker} I {disfmarker} it 's cuz I don't know what log magnitude spectral subtraction is gonna do to additive noise .
OK , so it 's then {disfmarker} then it 's {disfmarker} it 's {disfmarker} it 's reasonable to expect it would be helpful if we used it with the SRI system
Yeah , w we 're often asked this when we work with a system that {disfmarker} that isn't {disfmarker} isn't sort of industry {disfmarker} industry standard great ,
uh and we see some reduction in error using some clever method ,
then , you know , will it work on a {disfmarker} {vocalsound} on a {disfmarker} on a good system .
So what 's the advantage of support vector machines ?
